// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package queries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ChatType string

const (
	ChatTypeGroup    ChatType = "group"
	ChatTypeOneOnOne ChatType = "one_on_one"
)

func (e *ChatType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatType(s)
	case string:
		*e = ChatType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatType: %T", src)
	}
	return nil
}

type NullChatType struct {
	ChatType ChatType `json:"chatType"`
	Valid    bool     `json:"valid"` // Valid is true if ChatType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatType) Scan(value interface{}) error {
	if value == nil {
		ns.ChatType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatType), nil
}

type DeliveryStatus string

const (
	DeliveryStatusSent      DeliveryStatus = "sent"
	DeliveryStatusDelivered DeliveryStatus = "delivered"
	DeliveryStatusRead      DeliveryStatus = "read"
)

func (e *DeliveryStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeliveryStatus(s)
	case string:
		*e = DeliveryStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DeliveryStatus: %T", src)
	}
	return nil
}

type NullDeliveryStatus struct {
	DeliveryStatus DeliveryStatus `json:"deliveryStatus"`
	Valid          bool           `json:"valid"` // Valid is true if DeliveryStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeliveryStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DeliveryStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeliveryStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeliveryStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeliveryStatus), nil
}

type FriendshipStatus string

const (
	FriendshipStatusPending  FriendshipStatus = "pending"
	FriendshipStatusAccepted FriendshipStatus = "accepted"
	FriendshipStatusDeclined FriendshipStatus = "declined"
	FriendshipStatusBlocked  FriendshipStatus = "blocked"
)

func (e *FriendshipStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FriendshipStatus(s)
	case string:
		*e = FriendshipStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for FriendshipStatus: %T", src)
	}
	return nil
}

type NullFriendshipStatus struct {
	FriendshipStatus FriendshipStatus `json:"friendshipStatus"`
	Valid            bool             `json:"valid"` // Valid is true if FriendshipStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFriendshipStatus) Scan(value interface{}) error {
	if value == nil {
		ns.FriendshipStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FriendshipStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFriendshipStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FriendshipStatus), nil
}

type MessageType string

const (
	MessageTypePlaintext MessageType = "plaintext"
	MessageTypeImage     MessageType = "image"
	MessageTypeVideo     MessageType = "video"
	MessageTypeAudio     MessageType = "audio"
	MessageTypeData      MessageType = "data"
)

func (e *MessageType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MessageType(s)
	case string:
		*e = MessageType(s)
	default:
		return fmt.Errorf("unsupported scan type for MessageType: %T", src)
	}
	return nil
}

type NullMessageType struct {
	MessageType MessageType `json:"messageType"`
	Valid       bool        `json:"valid"` // Valid is true if MessageType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMessageType) Scan(value interface{}) error {
	if value == nil {
		ns.MessageType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MessageType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMessageType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MessageType), nil
}

type ChangeEmail struct {
	ID                int32            `json:"id"`
	UserID            pgtype.UUID      `json:"userId"`
	NewEmail          string           `json:"newEmail"`
	ConfirmationToken string           `json:"confirmationToken"`
	CreatedAt         pgtype.Timestamp `json:"createdAt"`
}

type Chat struct {
	ID            pgtype.UUID      `json:"id"`
	Name          string           `json:"name"`
	LastMessageID pgtype.UUID      `json:"lastMessageId"`
	PictureUrl    string           `json:"pictureUrl"`
	ChatType      ChatType         `json:"chatType"`
	Blocked       *bool            `json:"blocked"`
	CreatedAt     pgtype.Timestamp `json:"createdAt"`
}

type Chatmessage struct {
	ID             pgtype.UUID      `json:"id"`
	ChatID         pgtype.UUID      `json:"chatId"`
	SenderID       pgtype.UUID      `json:"senderId"`
	TextContent    *string          `json:"textContent"`
	MessageType    MessageType      `json:"messageType"`
	MediaUrl       *string          `json:"mediaUrl"`
	DeliveryStatus DeliveryStatus   `json:"deliveryStatus"`
	CreatedAt      pgtype.Timestamp `json:"createdAt"`
}

type Friend struct {
	SenderID   pgtype.UUID      `json:"senderId"`
	ReceiverID pgtype.UUID      `json:"receiverId"`
	Status     FriendshipStatus `json:"status"`
	CreatedAt  pgtype.Timestamp `json:"createdAt"`
}

type User struct {
	ID          pgtype.UUID      `json:"id"`
	Email       string           `json:"email"`
	Username    string           `json:"username"`
	Password    string           `json:"password"`
	Salt        string           `json:"salt"`
	IsAdmin     bool             `json:"isAdmin"`
	EmailActive bool             `json:"emailActive"`
	EmailToken  *string          `json:"emailToken"`
	PictureUrl  string           `json:"pictureUrl"`
	CreatedAt   pgtype.Timestamp `json:"createdAt"`
}

type UserChat struct {
	UserID         pgtype.UUID      `json:"userId"`
	ChatID         pgtype.UUID      `json:"chatId"`
	UnreadMessages int64            `json:"unreadMessages"`
	CreatedAt      pgtype.Timestamp `json:"createdAt"`
}
