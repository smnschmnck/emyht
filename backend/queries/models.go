// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package queries

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ChatType string

const (
	ChatTypeGroup    ChatType = "group"
	ChatTypeOneOnOne ChatType = "one_on_one"
)

func (e *ChatType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChatType(s)
	case string:
		*e = ChatType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChatType: %T", src)
	}
	return nil
}

type NullChatType struct {
	ChatType ChatType `json:"chat_type"`
	Valid    bool     `json:"valid"` // Valid is true if ChatType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChatType) Scan(value interface{}) error {
	if value == nil {
		ns.ChatType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChatType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChatType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChatType), nil
}

type DeliveryStatus string

const (
	DeliveryStatusSent      DeliveryStatus = "sent"
	DeliveryStatusDelivered DeliveryStatus = "delivered"
	DeliveryStatusRead      DeliveryStatus = "read"
)

func (e *DeliveryStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = DeliveryStatus(s)
	case string:
		*e = DeliveryStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for DeliveryStatus: %T", src)
	}
	return nil
}

type NullDeliveryStatus struct {
	DeliveryStatus DeliveryStatus `json:"delivery_status"`
	Valid          bool           `json:"valid"` // Valid is true if DeliveryStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullDeliveryStatus) Scan(value interface{}) error {
	if value == nil {
		ns.DeliveryStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.DeliveryStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullDeliveryStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.DeliveryStatus), nil
}

type FriendshipStatus string

const (
	FriendshipStatusPending  FriendshipStatus = "pending"
	FriendshipStatusAccepted FriendshipStatus = "accepted"
	FriendshipStatusDeclined FriendshipStatus = "declined"
	FriendshipStatusBlocked  FriendshipStatus = "blocked"
)

func (e *FriendshipStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = FriendshipStatus(s)
	case string:
		*e = FriendshipStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for FriendshipStatus: %T", src)
	}
	return nil
}

type NullFriendshipStatus struct {
	FriendshipStatus FriendshipStatus `json:"friendship_status"`
	Valid            bool             `json:"valid"` // Valid is true if FriendshipStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullFriendshipStatus) Scan(value interface{}) error {
	if value == nil {
		ns.FriendshipStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.FriendshipStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullFriendshipStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.FriendshipStatus), nil
}

type MessageType string

const (
	MessageTypePlaintext MessageType = "plaintext"
	MessageTypeImage     MessageType = "image"
	MessageTypeVideo     MessageType = "video"
	MessageTypeAudio     MessageType = "audio"
	MessageTypeData      MessageType = "data"
)

func (e *MessageType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MessageType(s)
	case string:
		*e = MessageType(s)
	default:
		return fmt.Errorf("unsupported scan type for MessageType: %T", src)
	}
	return nil
}

type NullMessageType struct {
	MessageType MessageType `json:"message_type"`
	Valid       bool        `json:"valid"` // Valid is true if MessageType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMessageType) Scan(value interface{}) error {
	if value == nil {
		ns.MessageType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MessageType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMessageType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MessageType), nil
}

type ChangeEmail struct {
	Uuid              string `json:"uuid"`
	NewEmail          string `json:"new_email"`
	ConfirmationToken string `json:"confirmation_token"`
}

type Chat struct {
	ChatID            string      `json:"chat_id"`
	Name              string      `json:"name"`
	LastMessageID     pgtype.Text `json:"last_message_id"`
	PictureUrl        string      `json:"picture_url"`
	ChatType          ChatType    `json:"chat_type"`
	CreationTimestamp int64       `json:"creation_timestamp"`
	Blocked           pgtype.Bool `json:"blocked"`
}

type Chatmessage struct {
	MessageID      string         `json:"message_id"`
	ChatID         string         `json:"chat_id"`
	SenderID       string         `json:"sender_id"`
	TextContent    pgtype.Text    `json:"text_content"`
	MessageType    MessageType    `json:"message_type"`
	MediaUrl       pgtype.Text    `json:"media_url"`
	Timestamp      int64          `json:"timestamp"`
	DeliveryStatus DeliveryStatus `json:"delivery_status"`
}

type Friend struct {
	Sender    string           `json:"sender"`
	Reciever  string           `json:"reciever"`
	Status    FriendshipStatus `json:"status"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
}

type User struct {
	Uuid        string      `json:"uuid"`
	Email       string      `json:"email"`
	Username    string      `json:"username"`
	Password    string      `json:"password"`
	Salt        string      `json:"salt"`
	IsAdmin     bool        `json:"is_admin"`
	EmailActive bool        `json:"email_active"`
	EmailToken  pgtype.Text `json:"email_token"`
	PictureUrl  string      `json:"picture_url"`
}

type UserChat struct {
	Uuid           string `json:"uuid"`
	ChatID         string `json:"chat_id"`
	UnreadMessages int64  `json:"unread_messages"`
}
